open money REST architecture, draft

Low-level API to the mesh which has two types of resources, entities and links:

GET
	/entities/<id>|<filter-spec> => return info on the entity or entities
	/entities/<id>/links/<link-id>|<filter-spec> => return links for the entity (as specified by the filter spec)

POST
	/entities/ {specification,access_control,type} => create an entity of the given type
	/entities/<id>/links/ {link_omrl,link_type,signature} => create a relationship between two entities (naming in a context, using, approving, declaring flow, etc)

DELETE
	/entities/<id> => delete entity
	/entities/<id>/links/<id> => delete link

High-level read-only API to the mesh for the various types of entities and for flows:

GET
	/<entity-type>/<id>|<filter-spec> => return info on the named entity type (accounts/currencies/contexts)
	/accounts|currencies/<id>/flows/<id>|<filter-spec> => return flow record(s) for the entity (as specified by the filter spec)
	/accounts|currencies/<id>/summary/<filter-spec> => return summaries of the flows to/from the entity (as specified by the filter

High-level API to the churn (used to create the the mesh):

GET
	/events/<id>|<filter-spec> => return info on the events

POST
	/events {event} => post a new event (creates entities and necessary links)
	

Hi level OMRL resolution API, this API does recursive searching of parent name resolution servers.

GET
	/omrls/<omrl> => returns om_url for the omrl

Low level API to configure resolution.

GET
	/omrlrecs/<id> => returns a resolution record

POST
	/omrlrecs/ {src_omrl, dest_url, access_control}  => create an new resolution record
	
PUT
	/omrlrecs/ {src_omrl, dest_url, access_control}  => update a resolution record

DELETE
	/omrlrecs/<id> => delete resolution record




Obsolete:

POST
	/accounts/<id>/flows {flow} => post a new flow (creates flow entity and necessary links)
	/accounts {flow currency=0} => create an account (flow from must be ?)
	/currencies  {flow currency=0} => create a currency (flow from must be an account)
	/currencies/<id>/flows {flow currency=0} => join/leave a currency (from from must be an account)
	/currencies/<idX>/flows {flow currency=<idX>} => approve flow (return signature)
	/contexts {flow currency=0} => create a context (flow from must be ?)
	/contexts/<id> {flow currency=0} => link an account/context/currency with this context
	/contexts/<id> {flow currency != 0} => approve flow (return signature)
	/notary {flow}

DELETE
	/<entity-type>/<id> => delete entity
	/<entity-type>/<id>/flows/<flow-id> => reverse a flow
	
